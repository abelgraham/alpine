#line 2 "osdep/codepage.wnt"

/*----------------------------------------------------------------------
    Translation tables to map windows codepages to ISO-8859-x charsets
    and back.

  ----------------------------------------------------------------------*/

#ifdef	notdef
/* NOTE: this isn't used right now */
/*
 * Map from ISO 8859-2 Latin-2 to Windows Code Page 1250
 */
unsigned char L2cp1250[] = {
  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
 16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
 32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
 48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
 64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
 80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,
 96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
160, 165, 162, 163, 164, 188, 140, 167, 168, 138, 170, 141, 143, 173, 142, 175,
176, 185, 178, 179, 180, 190, 156, 161, 184, 154, 186, 157, 159, 189, 158, 191,
192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
};


/* NOTE: this isn't used right now */
/*
 * Map from ISO 8859-2 Latin-2 to Windows Code Page 1250
 */
unsigned char cp1250L2[] = {
  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
 16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
 32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
 48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
 64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
 80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,
 96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 169, 139, 166, 171, 174, 172,
144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 185, 155, 182, 187, 190, 188,
160, 183, 162, 163, 164, 161, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
176, 177, 178, 179, 180, 181, 182, 183, 184, 177, 186, 187, 165, 189, 181, 191,
192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
};
#endif


/*----------------------------------------------------------------------
    Return the specified file's contents in a translation array

  Args: file name to open

  Result: Returns array of unsigned char

  ----------------------------------------------------------------------*/
unsigned char *
read_xtable(fname)
    char *fname;
{
    FILE *fp;
    unsigned char *cp;
    int  c, i = 0;

    if(fname && (fp = fopen(fname, "r"))){
	cp = (unsigned char *)fs_get(256 * sizeof(unsigned char));

	while(fscanf(fp, "%d ", &c) == 1 && i < 256)
	  cp[i++] = (unsigned char)c;

	fclose(fp);

	if(i != 256){		/* table MUST be correct size */
	    q_status_message1(SM_ORDER,2,2,"Translation table \"%s\" too small",
			      fname);
	    display_message('x');
	    fs_give((void **)&cp);
	}

	return(cp);
    }
    else
      return(NULL);
}
